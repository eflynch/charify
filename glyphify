#!/usr/bin/env python3

import os
from PIL import Image
import numpy as np


im_memo = {}
im_s_memo = {}


def load_char(n, size):
    if (n, size) in im_s_memo:
        im = im_s_memo[(n, size)]
    else:
        if n in im_memo:
            im = im_memo[n]
        else:
            im = Image.open("chars/%s" % n)
            im_memo[n] = im
        r = size / max(im.size)
        new_sizes = (max(int(r * s), 1) for s in im.size)
        im = im.resize(new_sizes)
        im_s_memo[(n, size)] = im

    char = np.asarray(im, dtype=np.uint8)
    return char


def glyphify(in_data, chars, colors, size):
    bits = [int(item) for sublist in (bin(byte)[2:].rjust(8, '0') for byte in in_data.encode('utf-8')) for item in sublist]
    bits_per_char = int(np.floor(np.log2(len(chars))))
    bits_per_color = int(np.floor(np.log2(len(colors))))
    num_chars_required = len(bits) / (bits_per_char + bits_per_color)
    grid_size = int(np.ceil(np.sqrt(num_chars_required)))
    output = np.zeros((grid_size*size, grid_size*size, 4), dtype=np.uint8)
    output[:, :, 0] = 0

    grid_x = 0
    grid_y = 0
    while bits:
        char_bits = []
        color_bits = []
        for x in range(bits_per_char):
            if (bits):
                char_bits.append(bits.pop(0))
            else:
                char_bits.append(0)
        for x in range(bits_per_color):
            if (bits):
                color_bits.append(bits.pop(0))
            else:
                color_bits.append(0)

        char_index = sum(b << i for (i, b) in enumerate(char_bits))
        color_index = sum(b << i for (i, b) in enumerate(color_bits))
        char = load_char(chars[char_index], size)
        color = colors[color_index]
        output_region = output[grid_y:grid_y+char.shape[0], grid_x:grid_x+char.shape[1], :]
        output_region[:, :, 0] = color[0]
        output_region[:, :, 1] = color[1]
        output_region[:, :, 2] = color[2]
        output_region[:, :, 3] = char[:, :, 1]

        grid_x += size
        if grid_x >= grid_size * size:
            grid_x = 0
            grid_y += size

    return Image.fromarray(np.uint8(output), "RGBA").convert("RGBA")


def deglyphify(in_data, chars, colors, size):
    img = np.asarray(in_data, dtype=np.uint8)
    grid_size = img.shape[0] / size
    bits_per_char = int(np.floor(np.log2(len(chars))))
    bits_per_color = int(np.floor(np.log2(len(colors))))

    def find_color_index(char_region):
        visible_pixels = char_region[char_region[:,:,3] > 0]
        color = tuple(int(c) for c in visible_pixels[0][0:3])
        color_index = colors.index(color)
        return color_index

    def find_char_index(char_region):
        lowest_diff = float("inf")
        best_char = None
        for c in chars:
            char = load_char(c, size)
            diff = np.sum(np.square(char_region[:char.shape[0], :char.shape[1], 3] - char[:, :, 1]))
            if diff < lowest_diff:
                lowest_diff = diff
                best_char = c
        return chars.index(best_char)

    grid_x = 0
    grid_y = 0
    bits = []
    while grid_y < grid_size * size and grid_x < grid_size * size:
        char_region = img[grid_y:grid_y+size,grid_x:grid_x+size,:]
        visible_pixels = char_region[char_region[:,:,3] > 0]
        if not visible_pixels.any():
            break

        char_index = find_char_index(char_region)
        for i in range(bits_per_char):
            bits.append(char_index >> i & 0x001)

        color_index = find_color_index(char_region)
        for i in range(bits_per_color):
            bits.append(color_index >> i & 0x001)

        grid_x += size
        if grid_x >= grid_size * size:
            grid_x = 0
            grid_y += size

    output = ""
    for byte_index in range(0, len(bits), 8):
        byte = bits[byte_index:byte_index+8]
        n = sum(b << i for i, b in enumerate(reversed(byte)))
        output += chr(n)

    return output


if __name__ == "__main__":
    from optparse import OptionParser

    parser = OptionParser()
    parser.add_option("-d", "--deglyphify", dest="deglyphify", action="store_true", default=False)
    parser.add_option("-i", "--input", dest="input")
    parser.add_option("-o", "--output", dest="output")
    parser.add_option("-s", "--size", dest="size", default="10")

    (options, args) = parser.parse_args()

    chars = [os.path.basename(f) for f in os.listdir("glyphs")]

    colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (0, 0, 0), (255, 255, 255)]

    size = int(options.size)

    input_data = options.input or args[0]

    if options.deglyphify:
        input_img = Image.open(input_data)
        output = deglyphify(input_img, chars, colors, size)
        if options.output:
            with open(options.output, "w") as f:
                f.write(output)
        else:
            print(output)
        
    else:
        output = glyphify(input_data, chars, colors, size)
        if options.output:
            output.save(options.output, "png")
        else:
            output.show()
        
